{"version":3,"sources":["Components/Cell.js","Components/Board.js","Components/Game.js","App.js","index.js"],"names":["Cell","props","value","info","revealed","flagged","className","onClick","event","showValue","x","y","onContextMenu","putFlag","Board","row","col","useState","grid","setGrid","flaggs","setFlaggs","status","setStatus","startGame","setStartGame","createBoard","useCallback","board","rowArray","push","bombCount","Math","floor","random","i","j","useEffect","e","preventDefault","gridCopy","slice","number","target","revealEmptyCells","getNeigbors","forEach","neighbors","style","color","map","oneRow","singleCneighborsl","id","da","newBoard","Game","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.fac62fcb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cell = (props) => {\r\n\r\n    const value = props.info.revealed ? (props.info.value !== 0 ? (props.info.value === \"X\" ? \"ðŸ’£\" : props.info.value) : \"\") : props.info.flagged ? \"ðŸš©\" : \"\";\r\n    return (\r\n        <div className={props.info.revealed ? \"cellRevealed\" : \"cell\"} onClick={(event) => props.showValue(event, props.info.x, props.info.y)} onContextMenu={(event) => props.putFlag(event, props.info.x, props.info.y)}>{value}</div >\r\n    );\r\n};\r\n\r\nexport default Cell;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport Cell from './Cell';\r\n\r\nconst Board = (props) => {\r\n    const row = props.row;\r\n    const col = props.col;\r\n    const [grid, setGrid] = useState([])\r\n    const [flaggs, setFlaggs] = useState(10);\r\n    const [status, setStatus] = useState(\"Game in proggress\")\r\n    const [startGame, setStartGame] = useState(false)\r\n\r\n    /* Function to create board, we have 2d array and for each cell we have value, is revealed, position on x and y and is cell flagged */\r\n    const createBoard = useCallback(() => {\r\n        let board = [];\r\n\r\n        for (let x = 0; x < row; x++) {\r\n            let rowArray = [];\r\n            for (let y = 0; y < col; y++) {\r\n                rowArray.push({\r\n                    value: 0,\r\n                    revealed: false,\r\n                    x: x,\r\n                    y: y,\r\n                    flagged: false\r\n                })\r\n            }\r\n            board.push(rowArray)\r\n        }\r\n        let bombCount = 0;\r\n\r\n        // while loop to create 10 bombs, we use random to take random x and y and if that position is equel to 0 we place bomb there\r\n        // if there is bomb on that place he wont place another bomb but he will rerun random and try again\r\n        while (bombCount < 10) {\r\n            let x = Math.floor(Math.random() * (row - 1 - 0 + 1) + 0)\r\n            let y = Math.floor(Math.random() * (col - 1 - 0 + 1) + 0)\r\n\r\n            if (board[x][y].value === 0) {\r\n                board[x][y].value = \"X\";\r\n                bombCount++;\r\n            }\r\n        }\r\n\r\n        /*Now we are adding number on our cells. We go through double loop and what we need is to chack if we have bomb around our position\r\n        if we find bomb we add 1 on our cell value\r\n        we chack if i is greater then 0 because if its 0 we cant see row above 0 because there is none and we would get error\r\n        Samo goes for j\r\n        */\r\n        for (let i = 0; i < row; i++) {\r\n            for (let j = 0; j < col; j++) {\r\n                if (board[i][j].value !== \"X\") {\r\n\r\n                    if (i > 0 && board[i - 1][j].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                    if (j > 0 && board[i][j - 1].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                    if (j < col - 1 && board[i][j + 1].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                    if (i < row - 1 && board[i + 1][j].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n\r\n\r\n                    if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                    if (i > 0 && j < row - 1 && board[i - 1][j + 1].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                    if (i < row - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                    if (i < row - 1 && j < row - 1 && board[i + 1][j + 1].value === \"X\") {\r\n                        board[i][j].value++;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        // this function will return board to us\r\n        return board;\r\n    }, [col, row]);\r\n\r\n    /* When our game render first time we create board */\r\n    useEffect(() => {\r\n        const board = createBoard();\r\n        // we set our grid to value that we got from function createBoard\r\n        setGrid(board);\r\n        setStartGame(true);\r\n    }, [createBoard])\r\n\r\n    /*Function for right click\r\n    we want to preventDefault to make game easyer\r\n    we watch if that cell is already revealed because if it is we cant place flag on it \r\n    and we chack if its already flagged\r\n    If its not we place flag and if flag is already there we just remove it\r\n    We make copy of our grid and set it at the end to change cell.flagged value\r\n    */\r\n    const putFlag = (e, x, y) => {\r\n        e.preventDefault();\r\n        const gridCopy = grid.slice();\r\n        if (gridCopy[x][y].flagged === false && gridCopy[x][y].revealed === false) {\r\n            setFlaggs(flaggs - 1)\r\n            gridCopy[x][y].flagged = true;\r\n        }\r\n        else {\r\n            if (!gridCopy[x][y].revealed) {\r\n                setFlaggs(flaggs + 1)\r\n            }\r\n            gridCopy[x][y].flagged = false;\r\n        }\r\n        setGrid(gridCopy)\r\n    }\r\n\r\n    /*Function for left click\r\n    we copy our grid array because we will change cell values\r\n    we chack if its flagged then we cant reveal our cell\r\n    if cell is empty we call revealEmptyCells function but we will explain it later\r\n    and we go throught loop to chack how many cells are revealed if that number is 54 we have winner\r\n    if our player click on bomb game is over\r\n    */\r\n    const showValue = (e, x, y) => {\r\n\r\n        let gridCopy = grid.slice();\r\n        let number = 0;\r\n        if (gridCopy[x][y].flagged === false) {\r\n            e.target.className = \"cellRevealed\"\r\n            gridCopy[x][y].revealed = true;\r\n            if (gridCopy[x][y].value === 0) {\r\n                gridCopy = revealEmptyCells(x, y, gridCopy);\r\n            }\r\n            for (let i = 0; i < row; i++) {\r\n                for (let j = 0; j < col; j++) {\r\n                    if (gridCopy[i][j].revealed === true) {\r\n                        number++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (number === 54) {\r\n                setStatus(\"You Won!\");\r\n                for (let i = 0; i < row; i++) {\r\n                    for (let j = 0; j < col; j++) {\r\n                        if (gridCopy[i][j].flagged && gridCopy[i][j].value === \"X\") {\r\n                            continue;\r\n                        }\r\n                        gridCopy[i][j].revealed = true;\r\n\r\n                    }\r\n                }\r\n            }\r\n            if (gridCopy[x][y].value === \"X\") {\r\n                setStatus(\"You Lost!\")\r\n                for (let i = 0; i < row; i++) {\r\n                    for (let j = 0; j < col; j++) {\r\n                        if (gridCopy[i][j].flagged && gridCopy[i][j].value === \"X\") {\r\n                            continue;\r\n                        }\r\n                        gridCopy[i][j].revealed = true;\r\n\r\n                    }\r\n                }\r\n            }\r\n            setGrid(gridCopy)\r\n        }\r\n    }\r\n\r\n    /* Function to reveal empty cells\r\n    first we need our neigbour cells\r\n    when we got all of them we go through each neigbours cell\r\n    and we chack if that cell is not flagged and if its not revealed because we dont want to reaveal flagged cell and cell that is already revealed\r\n    then we chack if cell is 0 or if cell is not bomb. coz we want only to reveal numbers and empty cells\r\n    if all that is true we reveal that cell and if we value of that cell is 0 that means its empty\r\n    we call this function aggain just with new parameters, i mean with new cell\r\n    */\r\n    const revealEmptyCells = (x, y, grid) => {\r\n        const area = getNeigbors(x, y, grid);\r\n        area.forEach(value => {\r\n            if (!value.flagged && !value.revealed && (value.value === 0 || value.value !== \"X\")) {\r\n                grid[value.x][value.y].revealed = true;\r\n                if (value.value === 0) {\r\n                    revealEmptyCells(value.x, value.y, grid);\r\n                }\r\n            }\r\n        })\r\n        return grid;\r\n    }\r\n\r\n    /*Almost same logic as adding numbers for bombs in neigbours but now we dont need to watch for bombs\r\n    we just need to see our neigbour cells and add them to array \r\n    */\r\n    const getNeigbors = (x, y, board) => {\r\n        const neighbors = [];\r\n        if (x > 0) {\r\n            neighbors.push(board[x - 1][y]);\r\n        }\r\n        if (x < col - 1) {\r\n            neighbors.push(board[x + 1][y]);\r\n        }\r\n        if (y > 0) {\r\n            neighbors.push(board[x][y - 1]);\r\n        }\r\n        if (y < row - 1) {\r\n            neighbors.push(board[x][y + 1]);\r\n        }\r\n\r\n\r\n        if (x > 0 && y > 0) {\r\n            neighbors.push(board[x - 1][y - 1]);\r\n        }\r\n        if (x > 0 && y < row - 1) {\r\n            neighbors.push(board[x - 1][y + 1]);\r\n        }\r\n        if (x < col - 1 && y > 0) {\r\n            neighbors.push(board[x + 1][y - 1]);\r\n        }\r\n        if (x < col - 1 && y < row - 1) {\r\n            neighbors.push(board[x + 1][y + 1]);\r\n        }\r\n\r\n        return neighbors;\r\n    }\r\n    /* We use it to make new board */\r\n    const restartGame = () => {\r\n        const newBoard = createBoard();\r\n        setGrid(newBoard);\r\n        setStatus(\"Game in proggress\")\r\n        setFlaggs(10);\r\n    }\r\n\r\n    const startingGame = () => {\r\n        setStartGame(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"boardWrapper\">\r\n            {startGame && (< div className=\"popupPlayGame\">\r\n                <div className=\"buttonPlayGame\" onClick={startingGame}>\r\n                    Play game\r\n                </div>\r\n\r\n            </div>)}\r\n\r\n            <div className=\"statusBar\">\r\n                <p style={status === \"You Won!\" ? { color: \"darkgreen\" } : (status === \"You Lost!\" ? { color: \"red\" } : { color: \"lemonchiffon\" })}>{status}</p>\r\n                <p>Mines remaining: {flaggs}</p>\r\n            </div>\r\n\r\n            <div className=\"board\">\r\n                {grid.map((oneRow) => (\r\n                    oneRow.map((singleCneighborsl, id) => (\r\n                        <Cell info={singleCneighborsl} da={id} putFlag={putFlag} showValue={showValue} key={id} />\r\n                    ))\r\n                ))}\r\n            </div>\r\n            {status !== \"Game in proggress\" && (< div className=\"popup\">\r\n                <div className=\"button\" onClick={restartGame}>\r\n                    {status === \"You Lost!\" ? \"Try again? \" : \"Play again?\"}\r\n                </div>\r\n\r\n            </div>)}\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board';\r\nconst Game = () => {\r\n\r\n    const row = 8;\r\n    const col = 8;\r\n    return (\r\n        <div>\r\n            <Board row={row} col={col} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;","\r\nimport './App.css';\r\nimport Game from './Components/Game';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nrender(\r\n\r\n  <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}